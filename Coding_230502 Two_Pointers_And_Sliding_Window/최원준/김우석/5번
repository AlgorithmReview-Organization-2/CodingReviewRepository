https://leetcode.com/problems/find-the-duplicate-number/

1. 아이디어 :
    첫 번째 풀이 : 배열의 원소들을 HashSet에 넣으면서 중복되는 원소를 찾는다.
    두 번째 풀이 : 투 포인터를 이용해 먼저 두 인덱스가 만나는 지점을 찾고, 만나는 지점의 인덱스를 이용해 만나는 값을 찾는다. (거북이-토끼 알고리즘..?)
2. 시간복잡도 :
    두 경우 모두 O(N), N은 nums의 길이
3. 자료구조 :
    배열, HashSet
    
첫 번째 풀이(HashSet이용)
class Solution {
    public int findDuplicate(int[] nums) {
        int answer = 0;
            int length = nums.length;
            HashSet<Integer> set = new HashSet<>();

            //set에 원소가 있는지 확인하고 있으면 break, 없으면 원소 넣고 계속
            for(int i = 0; i < length; i++){
                if(set.contains(nums[i])){
                    answer = nums[i];
                    break;
                }
                set.add(nums[i]);
            }


            return answer;
    }
}

두 번째 풀이(투포인터 이용)
이 방법은, nums의 모든 원소들이 nums의 길이보다 작을 때만 쓸 수 있다!
class Solution {
    public int findDuplicate(int[] nums) {
        int slow = nums[0];
    int fast = nums[0];

    // slow와 fast가 만나는 지점을 찾음
    while (true) {
        slow = nums[slow];
        fast = nums[nums[fast]];
        if (slow == fast) {
            break;
        }
    }

    // slow를 다시 초기값으로 설정하고 slow와 fast가 같아질 때까지 이동시킴
    slow = nums[0];
    while (slow != fast) {
        slow = nums[slow];
        fast = nums[fast];
    }

    // 중복된 원소를 반환
    return slow;
    }
}
