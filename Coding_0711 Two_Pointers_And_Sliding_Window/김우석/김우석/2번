https://leetcode.com/problems/find-all-anagrams-in-a-string/

//시간복잡도 : O(N), N은 문자열 s의 길이
//아이디어 : 먼저 찾으려는 문자열 p에 대한 기록을 checkMap에 해둔다. left와 right 포인터 모두 0에서 시작하고 right를 증가시키다가 right-left 길이가 문자열 p와 같아지면 left 포인터 위치에 있는 값을 tempMap에서 제거한다. checkMap과 tempMap이 같을 때의 인덱스를 답에 추가해준다. tempMap을 매번 새로 생성하도록 코드를 작성해서 계속 TimeLimit이 났었는데, 그러지 않고 체크하려는 범위를 넘는 순간 제일 왼쪽 문자 값만 tempMap에서 제거해주는 방식으로 코드를 짜면 시간 효율이 좋아진다. 
//자료구조 : List, Map

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> answer = new ArrayList<>();
        Map<Character, Integer> checkMap = new HashMap<>();
        Map<Character, Integer> tempMap = new HashMap<>();
        int pLength = p.length();
        int left = 0;
        int right = 0;

        for(int i = 0; i < pLength; i++){
            checkMap.put(p.charAt(i), checkMap.getOrDefault(p.charAt(i), 0) + 1);
        }

        while(right < s.length()){
            char tempChar = s.charAt(right);
            tempMap.put(tempChar, tempMap.getOrDefault(tempChar,0) + 1);
            right++;
            
            if(checkMap.equals(tempMap)){
                answer.add(left);
            }

            if(right - left == p.length()){
                char leftChar = s.charAt(left);
                if(tempMap.containsKey(leftChar)){
                    tempMap.put(leftChar, tempMap.get(leftChar) - 1);
                    if(tempMap.get(leftChar) == 0){
                        tempMap.remove(leftChar);
                    }
                }
                left++;
            }
        }

        return answer;
    }
}
