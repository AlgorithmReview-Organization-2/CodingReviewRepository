https://leetcode.com/problems/insert-interval/

//시간복잡도 : O(NlogN), N은 arr의 길이
//아이디어 : 기존 intervals의 범위와 삽입할 interval의 범위를 비교하면서 필요한 것들만 arr에 넣어준다. 업데이트 해야할 구간이라면 arr에 넣지 않고 newInterval만 새로 바꿔준다. 마지막엔 새로운 범위인 newInterval을 삽입해주고 정렬한다.
//자료구조 : 배열

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {

            int row = intervals.length; //행렬의 세로 길이
            ArrayList<int[]> arr = new ArrayList<>();

            for(int i = 0; i < row; i++){
                if(intervals[i][1] < newInterval[0]) arr.add(intervals[i]);
                else if(intervals[i][0] > newInterval[1]) arr.add(intervals[i]);
                else{
                    newInterval[0] = Math.min(intervals[i][0], newInterval[0]);
                    newInterval[1] = Math.max(intervals[i][1], newInterval[1]);
                }
            }

            arr.add(newInterval);
            
            arr.sort(new Comparator<int[]>() {
                @Override
                public int compare(int[] o1, int[] o2) {
                    
                    return o1[0] - o2[0];
                }
            });

            return arr.toArray(new int[arr.size()][]);
        
    }
}
