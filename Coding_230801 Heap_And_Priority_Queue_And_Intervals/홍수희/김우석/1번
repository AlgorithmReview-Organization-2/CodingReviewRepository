https://leetcode.com/problems/sort-characters-by-frequency/

//시간복잡도 : O(N), N은 문자열의 길이
//아이디어 : 문자열을 돌면서 알파벳과 등장 횟수를 Map에 저장한다. 그리고 Map 의 EntrySet을 값을 기준으로 정렬하고, 그 횟수만큼 알파벳을 StringBuilder에 추가하고 반환한다.
//자료구조 : 배열, Map

class Solution {
    public String frequencySort(String s) {

            //알파벳과 등장 횟수를 저장할 map생성
            HashMap<String, Integer> map = new HashMap<>(); 
            StringBuilder sb = new StringBuilder();

            //단어의 알파벳을 하나하나 돌면서, 맵에 없으면 추가, 있으면 값 1 증가
            for(int i = 0; i < s.length(); i++){
                String key = String.valueOf(s.charAt(i));
                if(map.containsKey(key)){
                    int temp = 0;
                    temp = map.get(key) + 1;
                    map.put(key, temp);
                }
                else map.put(key, 1);
            }

            //map의 entrySet()배열을 만들고, 값을 기준으로 정렬
            List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());
            Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
                @Override
                public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
                    return o2.getValue() - o1.getValue();
                }
            });


            //entrySer()리스트를 돌면서 값 만큼 반복해서 키 값을 StringBuilder에 저장
            for(int i = 0; i < list.size(); i++){
                for(int j = 0; j < list.get(i).getValue(); j++){
                    sb.append(list.get(i).getKey());
                }
            }
            
            return sb.toString();
        
    }
}
