https://leetcode.com/problems/reducing-dishes/

//시간복잡도 : O(N) N은 주어진 배열의 길이
//아이디어 : 먼저 배열을 정렬한다. 가장 큰 수부터 더해지는 횟수가 가장 많고 그 뒤부터 하나씩 줄어든다는 점을 응용한다. 부분합 presum을 두고, 답으로 출력할 ans를 따로 둔다. 배열을 마지막부터 반복문을 돌면서 부분합 presum을 구하고, 부분합을 계속 ans에 더해준다. 부분합이 음수가 되면 ans가 작아지므로, 그 땐 ans에 더하지 않고 바로 반복문 빠져나오면 답을 구할 수 있다.
//자료구조 : 배열

class Solution {
    public int maxSatisfaction(int[] satisfaction) {
        Arrays.sort(satisfaction);
        int n = satisfaction.length;
        int presum = 0, ans = 0;
        for (int i = n - 1; i >= 0; i--) {
            presum += satisfaction[i];
            if (presum < 0) {
                break;
            }
            ans += presum;
        }
        return ans;
    }
}
