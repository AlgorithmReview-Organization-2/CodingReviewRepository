https://leetcode.com/problems/coin-change/

//시간복잡도 : O(N) N은 coins 배열의 길이 * amount
//아이디어 : 현재 금액 i를 만들기 위한 최소 동전 개수를 업데이트 해가며 dp 배열을 만든다. dp[amount]의 값이 amount보다 크면 만들 수 없으므로 -1 반환. 
//자료구조 : 배열

class Solution {
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, amount + 1);
        dp[0] = 0;
        
        for (int coin : coins) {
            for (int i = coin; i <= amount; i++) {
                dp[i] = Math.min(dp[i], dp[i - coin] + 1);
            }
        }
        
        return dp[amount] > amount ? -1 : dp[amount];
    }
}
