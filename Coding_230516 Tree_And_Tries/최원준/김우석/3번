https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/

1. 아이디어 :
    먼저 노드의 값들을 list에 넣고 정렬한다. 그 후 각 노드를 돌면서 노드 값의 위치를 list에서 찾고, 그 지점부터 list의 마지막까지 합을 구해서 해당 노드의 값을 바꾼다. 
2. 시간복잡도 :
     O(N^2), N은 노드의 개수
3. 자료구조 :
    트리, 배열

class Solution {
    public static List<Integer> list;

    public void inputPreOrder(TreeNode root){
        if(root == null) return;
        list.add(root.val);
        inputPreOrder(root.left);
        inputPreOrder(root.right);
    }

    public void resetNodeValue(TreeNode root){
        if(root == null) return;
        int sum = 0;
        int temp = root.val;
        int length = list.size();
        int index = list.indexOf(temp);
        for(int i = index; i < length; i++){
            sum += list.get(i);
        }
        root.val = sum;
        resetNodeValue(root.left);
        resetNodeValue(root.right);
    }

    public TreeNode bstToGst(TreeNode root) {
        list = new ArrayList<>();        
        //먼저 list에 값들을 넣는다.
        inputPreOrder(root);
        list.sort(Comparator.naturalOrder());
        resetNodeValue(root);

        return root;        
    }
}
