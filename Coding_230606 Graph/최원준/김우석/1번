https://leetcode.com/problems/find-if-path-exists-in-graph/

1. 시간복잡도 : O(N) N은 노드의 개수
2. 아이디어 : 각 노드간의 연결 상태를 Map에 기록한다. 방문한 노드는 set에 기록해두고, 재귀를 돌면서 연결된 다음 노드로 넘어간다. 목표하는 지점에 도달하면 return
3. 자료구조 : 배열, Set, Map

class Solution {
    HashMap<Integer, ArrayList> map = new HashMap<>();
    boolean answer = false;
    int goal;
    public void DFS(int source, HashSet set){
        //넘어간 다음 노드를 방문했다고 set에 기록한다.
        set.add(source);
        
        //방문한 지점의 값이 목표지점이면 종료
        if(source == goal){
            answer = true;
            return;
        }

        if(answer == true) return;
        
        //현재 노드와 연결된 모든 노드를 구한다.
        ArrayList<Integer> temp = map.get(source);

        //그 노드들 중에 방문하지 않은 노드에 대해서 재귀함수로 넘겨준다.
        for(Integer num : temp){
            if(!set.contains(Integer.valueOf(num))){
                DFS(num, set);
            }
        }

    }

    public boolean validPath(int n, int[][] edges, int source, int destination) {
        int height = edges.length;

        //먼저 연결관계를 Map에 저장
        for(int i = 0; i < height; i++){
            if(!map.containsKey(edges[i][0])){
                ArrayList<Integer> temp = new ArrayList<>();
                temp.add(edges[i][1]);
                map.put(edges[i][0], temp);
            }
            else map.get(edges[i][0]).add(edges[i][1]);

            if(!map.containsKey(edges[i][1])){
                ArrayList<Integer> temp = new ArrayList<>();
                temp.add(edges[i][0]);
                map.put(edges[i][1], temp);
            }
            else map.get(edges[i][1]).add(edges[i][0]);
        }

        goal = destination;
        HashSet<Integer> set = new HashSet<>();
        DFS(source, set);

        return answer;
    }
}
