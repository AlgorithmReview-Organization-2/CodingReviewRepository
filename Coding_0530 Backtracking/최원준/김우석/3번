https://leetcode.com/problems/letter-case-permutation/

1.시간복잡도 : O(N!) N은 문자열의 길이
2.아이디어 : 문자열을 char 배열로 만든 뒤, 각 인덱스를 대문자로 바꿔가며 재귀함수 호출한다. Set을 통해 중복여부를 확인해서 중복된 경우는 진행하지 않는다.
3.자료구조 : 배열, Set

class Solution {

    List<String>ans=new ArrayList<>();
    HashSet<String> set=new HashSet<>();

    void backtracking(char[] s,int index){

        if(index==s.length){
        String temp=new String(s);  
            if(!set.contains(temp)){
                ans.add(temp);
                set.add(temp);
            }
        return;
        }

        String temp=new String(s);
        //not change index character
        if(!set.contains(temp)){
            backtracking(s,index+1);
        }
        
        //change index character
        s[index]=Character.toUpperCase(s[index]);
        temp=new String(s);

        if(!set.contains(temp)){
            backtracking(s,index+1);
        }
        
        s[index]=Character.toLowerCase(s[index]);
    }

    public List<String> letterCasePermutation(String s) {
        //어짜피 모든 경우를 구해야하기 때문에 전부 소문자로 바꾼 뒤 시작!
        s=s.toLowerCase();

        char[]store=s.toCharArray();

        backtracking(store,0);

        return ans;

    }
}
