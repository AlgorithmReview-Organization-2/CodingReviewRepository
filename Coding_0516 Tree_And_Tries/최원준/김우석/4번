https://leetcode.com/problems/maximum-binary-tree/

1. 아이디어 :
    처음 주어진 배열을 돌면서 최대값과 그 위치를 찾고, 최대값을 기준으로 두 개의 list로 나눈다. 루트노드와 leftList, rightList를 전달 받아서 재귀적으로 트리를 만드는 함수를 만들어 호출한다.
2. 시간복잡도 :
     O(N^2), N은 배열의 길이
3. 자료구조 :
    트리, 배열
    
class Solution {

    public void makeMaximumTree(TreeNode root, List<Integer> left, List<Integer> right){
            List<Integer> leftList = new ArrayList<>();
            List<Integer> rightList = new ArrayList<>();
            TreeNode leftNode = new TreeNode();
            TreeNode rightNode = new TreeNode();
            int max = -1;
            int index = -1;

            if(root == null) return;

            if(left.size() == 0){
                leftNode = null;
                root.left = leftNode;
                makeMaximumTree(leftNode,new ArrayList<>(),new ArrayList<>());
            }
            else{
                for(int i = 0; i < left.size(); i++){
                    if(left.get(i) > max){
                        max = left.get(i);
                        index = i;
                    }
                }
                leftNode.val = max;
                leftList = left.subList(0,index);
                rightList = left.subList(index+1, left.size());
                root.left = leftNode;
                makeMaximumTree(leftNode,leftList,rightList);
            }

            max = -1;
            index = -1;
            leftList = new ArrayList<>();
            rightList = new ArrayList<>();
            leftNode = new TreeNode();
            rightNode = new TreeNode();

            if(right.size() == 0){
                rightNode = null;
                root.right = rightNode;
                makeMaximumTree(rightNode,new ArrayList<>(), new ArrayList<>());
            }
            else{
                for(int j = 0; j < right.size(); j++){
                    if(right.get(j) > max){
                        max = right.get(j);
                        index = j;
                    }
                }
                rightNode.val = max;
                leftList = right.subList(0,index);
                rightList = right.subList(index+1, right.size());
                root.right = rightNode;
                makeMaximumTree(rightNode,leftList,rightList);
            }
        }

    public TreeNode constructMaximumBinaryTree(int[] nums) {
        TreeNode answer = new TreeNode();
            int max = -1;
            int index = -1;
            int length = nums.length;
            List<Integer> list = new ArrayList<>();

            for(int i = 0; i < length; i++){
                list.add(nums[i]);
                if(nums[i] > max){
                    max = nums[i];
                    index = i;
                }
            }
            answer.val = max;
            makeMaximumTree(answer,list.subList(0,index),list.subList(index+1,length));

            return answer;
    }
}
