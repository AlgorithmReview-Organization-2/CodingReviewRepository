https://leetcode.com/problems/house-robber/

//시간복잡도 : O(N) N 은 주어진 배열의 길이
//아이디어 : dp 배열에 값을 기록한다. 값을 기록할 때는 그 전 까지의 최대값의 합이 새로 선택할 한 집의 돈의 값보다 큰 지 비교해서 그 중 큰 값을 고른다.--> A값! 그리고 새로 선택할 집보다 2개 전 집까지의 최대값과 새로 선택할 집의 돈의 값을 더한 값 B를 구한다. A와 B값 중 더 큰 값을 dp에 넣어준다. 
//자료구조 : 배열

class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        dp[0] = nums[0];
        for (int i = 1; i < n; i++) {
            if (i - 2 < 0) {
                dp[i] = Math.max(dp[i - 1], nums[i]);
            } else {
                dp[i] = Math.max(dp[i - 2] + nums[i], Math.max(dp[i - 1], nums[i]));
            }
        } 
        return dp[n - 1];
    }
}
