https://leetcode.com/problems/house-robber-ii/

//시간복잡도 : O(N) N 은 주어진 배열의 길이 
//아이디어 : 198번 문제의 응용이다. 집들이 직선이 아니라 원형으로 배치되어 있기 때문에, 첫번째 집과 마지막 집을 선택할지에 신경쓰면 된다. 똑같은 직선 구조로 생각하고 첫번째 집이 포함 될때, 안될때 두가지 경우를 생각해서 그 중 최대값을 구하면 끝!
//자료구조 : 배열


class Solution {
    public int rob(int[] nums) {
        int length = nums.length;
        int[] dp1 = new int[length-1];
        int[] dp2 = new int[length-1];

        if(length <= 3){
            int ans = 0;

            for(int i : nums){
                ans = Math.max(ans, i);
            }
            return ans;
        }

        dp1[0] = nums[0];
        dp2[0] = nums[1];

        for(int i = 1; i < length-1; i++){
            if(i == 1){
                dp1[i] = Math.max(nums[i], dp1[i-1]);
            }
            else{
                dp1[i] = Math.max(Math.max(nums[i], dp1[i-1]), dp1[i-2] + nums[i]);
            }
        }

        for(int i = 2; i < length; i++){
            if(i == 2){
                dp2[i-1] = Math.max(nums[i], dp2[i-2]);
            }
            else{
                dp2[i-1] = Math.max(Math.max(nums[i], dp2[i-2]), dp2[i-3] + nums[i]);
            }
        }

        return Math.max(dp1[length-2], dp2[length-2]);
    }
}
