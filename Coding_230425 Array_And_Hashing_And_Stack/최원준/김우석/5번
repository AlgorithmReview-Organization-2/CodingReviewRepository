https://leetcode.com/problems/spiral-matrix/

1. 아이디어 :
    지나간 자리는 -200으로 값을 바꾸고, 각 방향으로 진행하면서 끝점을 만나거나 -200을 만나면 방향을 바꾼다.
2. 시간복잡도 :
    O(n^2) : 2중 반복문
3. 자료구조 :
    배열

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> answer = new ArrayList<>();
            int row = matrix.length; //세로길이
            int col = matrix[0].length; //가로길이
            int count = row * col;
            int a = 0; //index
            int b = 0; //index

            while(count != 0){
                System.out.println(count);
                while(true) {
                    if(b == col || matrix[a][b] == -200) break;
                    answer.add(matrix[a][b]);
                    matrix[a][b] = -200;
                    b++;
                    count--;
                }
                b--;
                a++;
                while(true) {
                    if(a == row || matrix[a][b] == -200) break;
                    answer.add(matrix[a][b]);
                    matrix[a][b] = -200;
                    a++;
                    count--;
                }
                a--;
                b--;
                while(true) {
                    if(b == -1 || (matrix[a][b] == -200)){
                        break;
                    }
                    answer.add(matrix[a][b]);
                    matrix[a][b] = -200;
                    b--;
                    count--;
                }
                b++;
                a--;
                while(true) {
                    if(a == -1 || matrix[a][b] == -200) break;
                    answer.add(matrix[a][b]);
                    matrix[a][b] = -200;
                    a--;
                    count--;
                }
                a++;
                b++;
            }
            return answer;
    }
}
