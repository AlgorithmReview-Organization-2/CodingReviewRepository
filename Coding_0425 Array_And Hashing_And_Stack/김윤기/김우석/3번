https://leetcode.com/problems/plus-one/

1. 아이디어 :
    마지막 자리수에 1을 더하고, 반복문을 돌면서 첫번째자리까지 올림이 있는지 여부를 확인한다.
2. 시간복잡도 :
    O(n) : n은 digits의 길이
3. 자료구조 :
    배열

class Solution {
    public int[] plusOne(int[] digits) {
         int[] answer;
            int digitsLength = digits.length;

            //주어진 배열의 크기가 1일때는 따로 처리
            if(digitsLength == 1){
                digits[0] += 1;
                if(digits[0] != 10){
                    answer = new int[1];
                    answer[0] = digits[0];
                    return answer;
                }
                else{
                    answer = new int[2];
                    answer[0] = 1;
                    answer[1] = 0;
                    return answer;
                }
            }
            //1을 더해준다.
            digits[digitsLength-1] += 1;
            
            //주어진 배열의 길이가 1보다 크다면 마지막수부터 올림이 있는지 확인하면서 두번째 인덱스까지 확인
            for(int i = digitsLength - 1; i > 0; i--){
                if(digits[i] >= 10){
                    digits[i-1] += 1;
                    digits[i] -= 10;
                }
                else break;
            }

            //마지막에 첫번째 자리 수를 확인해 주고 처리를 해준다.
            if(digits[0] != 10){
                answer = new int[digitsLength];
                for(int i = 0; i < digitsLength; i++){
                    answer[i] = digits[i];
                }
            }
            else{
                answer = new int[digitsLength+1];
                answer[0] = 1;
                answer[1] = digits[0]-10;
                for(int i = 1; i < digitsLength; i++){
                    answer[i+1] = digits[i];
                }
            }
            return answer;
    }
}
